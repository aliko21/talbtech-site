const fallbackLang='en';const supported=['en','ar','fr','es'];const dirMap={ar:'rtl',en:'ltr',fr:'ltr',es:'ltr'};
async function loadTranslations(lang){try{const res=await fetch('translations.json');const data=await res.json();return data[lang]||data[fallbackLang]}catch(e){console.error('i18n load error',e);return null}}
function applyTranslations(map){if(!map)return;document.querySelectorAll('[data-i18n]').forEach(el=>{const key=el.getAttribute('data-i18n');if(map[key])el.textContent=map[key]});document.querySelectorAll('[data-i18n-placeholder]').forEach(el=>{const key=el.getAttribute('data-i18n-placeholder');if(map[key])el.setAttribute('placeholder',map[key])})}
function setDir(lang){document.documentElement.setAttribute('lang',lang);document.documentElement.setAttribute('dir',dirMap[lang]||'ltr')}
function detectLang(){const urlLang=new URLSearchParams(location.search).get('lang');if(urlLang&&supported.includes(urlLang))return urlLang;const stored=localStorage.getItem('lang');if(stored&&supported.includes(stored))return stored;const nav=(navigator.language||'en').slice(0,2);return supported.includes(nav)?nav:fallbackLang}
async function switchLang(to){localStorage.setItem('lang',to);setDir(to);const map=await loadTranslations(to);applyTranslations(map)}
document.addEventListener('DOMContentLoaded',async()=>{const year=document.getElementById('year');if(year)year.textContent=new Date().getFullYear();const obs=new IntersectionObserver((entries)=>{entries.forEach(e=>{if(e.isIntersecting){e.target.classList.add('in');obs.unobserve(e.target)}})},{threshold:.15});document.querySelectorAll('[data-animate]').forEach(el=>obs.observe(el));const initial=detectLang();document.getElementById('langSelect').value=initial;await switchLang(initial);document.getElementById('langSelect').addEventListener('change',e=>switchLang(e.target.value))});